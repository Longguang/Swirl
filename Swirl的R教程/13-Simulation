1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 13

  |                                                                                            |   0%

| One of the great advantages of using a statistical programming language like R is its vast
| collection of tools for simulating random numbers.

...

  |===                                                                                         |   3%

| This lesson assumes familiarity with a few common probability distributions, but these topics will
| only be discussed with respect to random number generation. Even if you have no prior experience
| with these concepts, you should be able to complete the lesson and understand the main ideas.

...

  |======                                                                                      |   6%

| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the
| documentation.

> ?sample

| Excellent work!

  |=========                                                                                   |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 4 5 1 1

| That's a job well done!

  |============                                                                                |  12%

| Now repeat the command to see how your result differs. (The probability of rolling the exact same
| result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 3 5 5 5

| That's correct!

  |==============                                                                              |  16%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH
| replacement. Sampling with replacement simply means that each number is "replaced" after it is
| selected, so that the same number can show up more than once. This is what we want here, since what
| you roll on one die shouldn't affect what you roll on any of the others.

...

  |=================                                                                           |  19%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply
| leave off the 'replace' argument.

> sample(1:20, 10)
 [1] 19  1 12 20 14 15  9 17 16 13

| Keep up the great work!

  |====================                                                                        |  22%

| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |=======================                                                                     |  25%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English
| alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X"
[25] "Y" "Z"

| You are doing so well!

  |==========================                                                                  |  28%

| The sample() function can also be used to permute, or rearrange, the elements of a vector. For
| example, try sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "O" "T" "I" "J" "N" "K" "B" "G" "X" "Q" "E" "P" "H" "D" "V" "L" "S" "A" "R" "C" "M" "Z" "F" "W"
[25] "Y" "U"

| You are amazing!

  |=============================                                                               |  31%

| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size'
| argument to sample() is not specified, R takes a sample equal in size to the vector from which you
| are sampling.

...

  |================================                                                            |  34%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a
| 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |==================================                                                          |  38%

| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of
| size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach
| specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3,
| 0.7). Assign the result to a new variable called flips.

> sample(c(0, 1), 100, prob = c(0.3, 0.7))
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> sample(c(0, 1), 100, prob = c(0.3, 0.7), replace = T)
  [1] 1 0 0 1 0 0 1 1 1 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 1
 [49] 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 1
 [97] 1 1 0 1

| You're close...I can feel it! Try it again. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <-
| sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| That's a job well done!

  |=====================================                                                       |  41%

| View the contents of the flips variable.

> flips
  [1] 0 0 1 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1
 [49] 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0
 [97] 1 0 1 0

| Your dedication is inspiring!

  |========================================                                                    |  44%

| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect
| approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained in
| flips using the sum() function.

> sum(flips)
[1] 77

| You nailed it! Good job!

  |===========================================                                                 |  47%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips),
| so we can use rbinom() to simulate a binomial random variable. Pull up the documentation for
| rbinom() using ?rbinom.

> ?rbinom

| All that hard work is paying off!

  |==============================================                                              |  50%

| Each probability distribution in R has an r*** function (for "random"), a d*** function (for
| "density"), a p*** (for "probability"), and q*** (for "quantile"). We are most interested in the
| r*** functions in this lesson, but I encourage you to explore the others on your own.

...

  |=================================================                                           |  53%

| A binomial random variable represents the number of 'successes' (heads) in a given number of
| independent 'trials' (coin flips). Therefore, we can generate a single random variable that
| represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob =
| 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of
| 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 67

| All that hard work is paying off!

  |====================================================                                        |  56%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size
| 1, with success probability of 0.7. Give it a try, assigning the result to a new variable called
| flips2.

> flip2 <- rbinom(1, size = 100, prob = 0.7)

| Keep trying! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flip2 <- rbinom(100, size = 1, prob = 0.7)

| Keep trying! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flip2 <- rbinom(1 : 100, size = 1, prob = 0.7)

| Give it another try. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(1 : 100, size = 1, prob = 0.7)

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(100, size = 1, prob = 0.7)

| You are doing so well!

  |=======================================================                                     |  59%

| View the contents of flips2.

> flips2
  [1] 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0
 [49] 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0 1 1 0
 [97] 1 1 1 1

| All that hard work is paying off!

  |==========================================================                                  |  62%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 74

| You nailed it! Good job!

  |============================================================                                |  66%

| Similar to rbinom(), we can use R to simulate random numbers from many other probability
| distributions. Pull up the documentation for rnorm() now.

> rbinom()
Error in rbinom() : argument "n" is missing, with no default
> rnorm()
Error in rnorm() : argument "n" is missing, with no default
> ?rnom
No documentation for ‘rnom’ in specified packages and libraries:
you could try ‘??rnom’

| Keep trying! Or, type info() for more options.

| Type ?rnorm to view its help file.

> ?rnorm

| You got it right!

  |===============================================================                             |  69%

| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the
| 'Usage' section in the documentation, the default values for the 'mean' and 'sd' arguments to
| rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard
| normal distribution. Give it a try.

> rnorm10
Error: object 'rnorm10' not found
> rnorm(10)
 [1]  0.2826056 -0.1100900  0.6840630 -0.6694451 -0.1337429  0.7815563 -0.3437410 -0.1380822
 [9] -1.1838448  0.6872240

| You are doing so well!

  |==================================================================                          |  72%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 105.25784 128.98268 129.47942  70.08946 151.96910 126.10987 111.92914 127.30286 107.33170
[10] 104.66447

| You are amazing!

  |=====================================================================                       |  75%

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values
| generated from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then
| I'll show you how to repeat the operation 100 times in a convenient and compact way.

...

  |========================================================================                    |  78%

| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for
| rpois() if you need help.

> ?rpois
> rpois(5, 10)
[1] 13 15  9 12 12

| That's the answer I was looking for.

  |===========================================================================                 |  81%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new
| variable called my_pois.

> my_pois <- replicate(100, rpois(5, 10))

| You're the best!

  |==============================================================================              |  84%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17]
[1,]   11    9    8    9   13    5    6   11    8     8    11     9     6     7     6    11     6
[2,]   11    8   11   11    9    6    9   10   11    12    10    13     6     7    15     7    11
[3,]    6    5    5   11    7    7   17    8   18    13    10    12     7    16     7    11    11
[4,]   10   11    7    9    9    8    6   13    7    11     3    12     9    20     9     6     9
[5,]   12   10    6   12   10   11   11   11   13    12     7    19    12    14    12     7     4
     [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33]
[1,]     9    18    13     8    11    12    13     9    15    10    13     8    10     9    12    10
[2,]     9    16    18     8     9    10     9    17     5     6    11     9     9    13    12     4
[3,]     7     8    12     9    12    10     9    12    14     7    13     6     7     6     8    11
[4,]    12    14    10    15    12    10     8    15     5     9     9    11     4    17     7     9
[5,]    13     9     8    11     7     7     6    14     9    10    11    15     6     7     7     5
     [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
[1,]    10     6     9     8     8    13    12    12    14    16     9     8     8     7    11    14
[2,]     8     9    12     5     5    10    15    11     9     9    13    13    12    15     9    16
[3,]     6     7     9    16    12    10    11     9    12    10    14     8    17     9     8    10
[4,]    10    18    19    11    11     8    11     8    14    14     9     9     7     6    16    11
[5,]     4     9    11     7     9     9     9    10    10    14     7    12    11     5     7    13
     [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65]
[1,]    14     8     9    12     7     8    13     5    11     7    12    10    11    10    10     8
[2,]     7     5     8     6     7     8     8     7    12    13     5     6    12     8    10     4
[3,]     9    13     7     9    11    12     7    10     6     7     5    14     7    10    10    16
[4,]    10    10     9     9    13     6    14    11     8     4    10     2    10     9     9     8
[5,]    12     7    11    16    10    14     6    11     7    10    10    14     8    10    14    13
     [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81]
[1,]    11    12    14     9    10     7    15     8    13    12    10    10     9    10     8     7
[2,]     9     7    10     6     8     8     9     7     7    10    14    14    12    14    11    12
[3,]    14    10    10    10    11     6    14    14    10    11     7    12     7    12     9    12
[4,]     9    12     6    11     9    10    12     7    10     9     8     7    12    10    12    13
[5,]    13    10     9     9    10     6     8     9     7    10    11    11     8    12     7     6
     [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97]
[1,]     9    10    14    14     8     5    14    10     8    11     9     5    10     8     9    17
[2,]     8     6     7    14     9     6     9    13    10     7     8    12    10     6     9     9
[3,]    14    11     9     9     9    13    12     9    12    10    10     7     8    11     8     9
[4,]     9    12     6     7     8    14    10     8    14     5     9    10    14    10    19    12
[5,]     9    12    18    14     6     7     7    10    13     8    10     7    12    15    14    15
     [,98] [,99] [,100]
[1,]     9    13      5
[2,]    13    14     13
[3,]    10    11      8
[4,]    15    12     11
[5,]    11     7     10

| You got it right!

  |================================================================================            |  88%

| replicate() created a matrix, each column of which contains 5 random numbers generated from a
| Poisson distribution with mean 10. Now we can find the mean of each column in my_pois using the
| colMeans() function. Store the result in a variable called cm.

> cm <- colMeans(my_pois)

| That's a job well done!

  |===================================================================================         |  91%

| And let's take a look at the distribution of our column means by plotting a histogram with
| hist(cm).

> hist(cm)

| You got it!

  |======================================================================================      |  94%

| Looks like our column means are almost normally distributed, right? That's the Central Limit
| Theorem at work, but that's a lesson for another day!

...

  |=========================================================================================   |  97%

| All of the standard probability distributions are built into R, including exponential (rexp()),
| chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |============================================================================================| 100%

| Simulation is practically a field of its own and we've only skimmed the surface of what's possible.
| I encourage you to explore these and other functions further on your own.